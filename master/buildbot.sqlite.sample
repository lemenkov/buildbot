PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE migrate_version (
	repository_id VARCHAR(250) NOT NULL, 
	repository_path TEXT, 
	version INTEGER, 
	PRIMARY KEY (repository_id)
);
INSERT INTO "migrate_version" VALUES('Buildbot','/usr/lib/python2.7/site-packages/buildbot/db/migrate',24);
CREATE TABLE change_files (
	changeid INTEGER NOT NULL, 
	filename VARCHAR(1024) NOT NULL, 
	FOREIGN KEY(changeid) REFERENCES changes (changeid)
);
CREATE TABLE change_properties (
	changeid INTEGER NOT NULL, 
	property_name VARCHAR(256) NOT NULL, 
	property_value VARCHAR(1024) NOT NULL, 
	FOREIGN KEY(changeid) REFERENCES changes (changeid)
);
CREATE TABLE sourcestamp_changes (
	sourcestampid INTEGER NOT NULL, 
	changeid INTEGER NOT NULL, 
	FOREIGN KEY(sourcestampid) REFERENCES sourcestamps (id), 
	FOREIGN KEY(changeid) REFERENCES changes (changeid)
);
CREATE TABLE builds (
	id INTEGER NOT NULL, 
	number INTEGER NOT NULL, 
	brid INTEGER NOT NULL, 
	start_time INTEGER NOT NULL, 
	finish_time INTEGER, 
	PRIMARY KEY (id), 
	FOREIGN KEY(brid) REFERENCES buildrequests (id)
);
CREATE TABLE patches (
	id INTEGER NOT NULL, 
	patchlevel INTEGER NOT NULL, 
	patch_base64 TEXT NOT NULL, 
	subdir TEXT, patch_author TEXT DEFAULT '' NOT NULL, patch_comment TEXT DEFAULT '' NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE objects (
	id INTEGER NOT NULL, 
	name VARCHAR(128) NOT NULL, 
	class_name VARCHAR(128) NOT NULL, 
	PRIMARY KEY (id), 
	CONSTRAINT object_identity UNIQUE (name, class_name)
);
CREATE TABLE object_state (
	objectid INTEGER NOT NULL, 
	name VARCHAR(256) NOT NULL, 
	value_json TEXT NOT NULL, 
	CONSTRAINT name_per_object UNIQUE (objectid, name), 
	FOREIGN KEY(objectid) REFERENCES objects (id)
);
CREATE TABLE buildrequest_claims (
	brid INTEGER, 
	objectid INTEGER, 
	claimed_at INTEGER NOT NULL, 
	FOREIGN KEY(brid) REFERENCES buildrequests (id), 
	FOREIGN KEY(objectid) REFERENCES objects (id)
);
CREATE TABLE buildrequests (
	id INTEGER NOT NULL, 
	buildsetid INTEGER NOT NULL, 
	buildername VARCHAR(256) NOT NULL, 
	priority INTEGER DEFAULT '0' NOT NULL, 
	complete INTEGER DEFAULT '0', 
	results SMALLINT, 
	submitted_at INTEGER NOT NULL, 
	complete_at INTEGER, 
	PRIMARY KEY (id)
);
CREATE TABLE users (
	uid INTEGER NOT NULL, 
	identifier VARCHAR(256) NOT NULL, bb_username VARCHAR(128), bb_password VARCHAR(128), 
	PRIMARY KEY (uid)
);
CREATE TABLE users_info (
	uid INTEGER NOT NULL, 
	attr_type VARCHAR(128) NOT NULL, 
	attr_data VARCHAR(128) NOT NULL, 
	FOREIGN KEY(uid) REFERENCES users (uid)
);
CREATE TABLE change_users (
	changeid INTEGER NOT NULL, 
	uid INTEGER NOT NULL, 
	FOREIGN KEY(changeid) REFERENCES changes (changeid), 
	FOREIGN KEY(uid) REFERENCES users (uid)
);
CREATE TABLE sourcestampsets (
	id INTEGER NOT NULL, 
	PRIMARY KEY (id)
);
CREATE TABLE buildsets (
	id INTEGER NOT NULL, 
	external_idstring VARCHAR(256), 
	reason VARCHAR(256), 
	sourcestampsetid INTEGER NOT NULL, 
	submitted_at INTEGER NOT NULL, 
	complete SMALLINT DEFAULT '0' NOT NULL, 
	complete_at INTEGER, 
	results SMALLINT, 
	PRIMARY KEY (id), 
	FOREIGN KEY(sourcestampsetid) REFERENCES sourcestamps (id), 
	FOREIGN KEY(sourcestampsetid) REFERENCES sourcestampsets (id)
);
CREATE TABLE sourcestamps (
	id INTEGER NOT NULL, 
	branch VARCHAR(256), 
	revision VARCHAR(256), 
	patchid INTEGER, 
	repository TEXT DEFAULT '' NOT NULL, 
	project TEXT DEFAULT '' NOT NULL, 
	sourcestampsetid INTEGER NOT NULL, codebase VARCHAR(256) DEFAULT '' NOT NULL, 
	PRIMARY KEY (id), 
	FOREIGN KEY(patchid) REFERENCES patches (id), 
	FOREIGN KEY(sourcestampsetid) REFERENCES sourcestampsets (id)
);
CREATE TABLE scheduler_changes (
	objectid INTEGER, 
	changeid INTEGER, 
	important INTEGER, 
	FOREIGN KEY(objectid) REFERENCES objects (id), 
	FOREIGN KEY(changeid) REFERENCES changes (changeid)
);
CREATE TABLE buildset_properties (
	buildsetid INTEGER NOT NULL, 
	property_name VARCHAR(256) NOT NULL, 
	property_value TEXT NOT NULL, 
	FOREIGN KEY(buildsetid) REFERENCES buildsets (id)
);
CREATE TABLE changes (
	changeid INTEGER NOT NULL, 
	author VARCHAR(256) NOT NULL, 
	comments TEXT NOT NULL, 
	is_dir SMALLINT NOT NULL, 
	branch VARCHAR(256), 
	revision VARCHAR(256), 
	revlink VARCHAR(256), 
	when_timestamp INTEGER NOT NULL, 
	category VARCHAR(256), 
	repository VARCHAR(512) DEFAULT '' NOT NULL, 
	project VARCHAR(512) DEFAULT '' NOT NULL, 
	codebase VARCHAR(256) DEFAULT '' NOT NULL, 
	PRIMARY KEY (changeid)
);
CREATE TABLE buildslaves (
	id INTEGER NOT NULL, 
	name VARCHAR(256) NOT NULL, 
	info TEXT NOT NULL, 
	PRIMARY KEY (id)
);
CREATE INDEX builds_number ON builds (number);
CREATE INDEX builds_brid ON builds (brid);
CREATE INDEX change_files_changeid ON change_files (changeid);
CREATE INDEX change_properties_changeid ON change_properties (changeid);
CREATE INDEX sourcestamp_changes_sourcestampid ON sourcestamp_changes (sourcestampid);
CREATE UNIQUE INDEX ix_buildrequest_claims_brid ON buildrequest_claims (brid);
CREATE INDEX ix_buildrequest_claims_objectid ON buildrequest_claims (objectid);
CREATE INDEX users_info_uid ON users_info (uid);
CREATE UNIQUE INDEX users_info_uid_attr_type ON users_info (uid, attr_type);
CREATE UNIQUE INDEX users_info_attrs ON users_info (attr_type, attr_data);
CREATE INDEX change_users_changeid ON change_users (changeid);
CREATE UNIQUE INDEX users_bb_user ON users (bb_username);
CREATE INDEX buildrequests_buildsetid ON buildrequests (buildsetid);
CREATE INDEX buildrequests_buildername ON buildrequests (buildername);
CREATE INDEX buildrequests_complete ON buildrequests (complete);
CREATE UNIQUE INDEX object_identity ON objects (name, class_name);
CREATE UNIQUE INDEX name_per_object ON object_state (objectid, name);
CREATE UNIQUE INDEX users_identifier ON users (identifier);
CREATE INDEX buildsets_complete ON buildsets (complete);
CREATE INDEX buildsets_submitted_at ON buildsets (submitted_at);
CREATE INDEX sourcestamps_sourcestampsetid ON sourcestamps (sourcestampsetid);
CREATE INDEX scheduler_changes_objectid ON scheduler_changes (objectid);
CREATE INDEX scheduler_changes_changeid ON scheduler_changes (changeid);
CREATE UNIQUE INDEX scheduler_changes_unique ON scheduler_changes (objectid, changeid);
CREATE INDEX buildset_properties_buildsetid ON buildset_properties (buildsetid);
CREATE INDEX changes_when_timestamp ON changes (when_timestamp);
CREATE INDEX changes_revision ON changes (revision);
CREATE INDEX changes_branch ON changes (branch);
CREATE INDEX changes_category ON changes (category);
CREATE INDEX changes_author ON changes (author);
CREATE UNIQUE INDEX buildslaves_name ON buildslaves (name);
COMMIT;
